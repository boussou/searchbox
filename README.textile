h1. Searchbox

This is a jQuery plugin that turns any textbox into a live search, or a "searchbox".
For previous documentation, see below

<h3>ADDED JSON response handling & multiple input fields handling  & processing through jquery tmpl </h3>
(http://ejohn.org/blog/javascript-micro-templating/ & one of its forks like https://github.com/BorisMoore/jquery-tmpl)

changes: data & tmpl
- data : jquery selector for collecting data to submit
- tmpl : if you use the john resig tmpl, & the server returns back JSON, then it is evaluated for every row
now you can call it like this:
<pre>
$('input.search').searchbox({
  url: your_url,
  param: 'q',
  dom_id: '#resultTable',
  delay: 250,
  data: 'input.search',
  tmpl: '<tr> <td>${brand} </td>    <td>${model} </td>  </tr>'
})
</pre>

if you have inputs like this:
<pre>    <input type="text" id=brand class="form-control search">
    <input type="text" id=model class="form-control search"></pre>
then you will receive on the server a GET request with values as: brand=value&model=value
all of the inputs that have a class as defined by the 'data' parameter will be included.

so you can have multiple fields & still use a live search form

<h4>To allow search to be triggered</h4>
 You can do it using 
$.searchbox.process();


h3. Usage

<pre><code>$('input.search').searchbox()</code></pre>

That's it, really. There are a few configuration options:

* <code>url</code> - a GET request is sent to this url (default: '/search')
* <code>param</code> - the actually parameter that gets sent to the server (default: 'query')
* <code>dom_id</code> - the element that gets updated with the results (default: '#results')
* <code>delay</code> - the keystroke delay (default: 100 ms)
* <code>loading_css</code> - the css for an ajax spinner/loading bar (default: '#loading')

So, customizing each config option might look like this:

<pre><code>$('input.search').searchbox({
  url: '/your/search/url',
  param: 'q',
  dom_id: '#thumbnails',
  delay: 250,
  loading_css: '#spinner'
})</code></pre>

h3. Hooks

There are a few places you can hook into the plugin by binding a function to specific events. Here are the events:

* <code>init.searchbox</code> - triggered once when the plugin code executes
* <code>before.searchbox</code> - triggered right before the search is performed
* <code>after.searchbox</code> - triggered right after the search completes

Here's an example of how to make use of them:

<pre><code>$(document).bind('init.searchbox', function() { ... })</code></pre>

h3. License

(c) 2009 Ryan Heath, released under the MIT license
